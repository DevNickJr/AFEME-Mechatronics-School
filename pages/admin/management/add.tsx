import { FormEvent, useEffect, useReducer, useState, useRef } from 'react'
import Head from "next/head";
import AdminLayout from "@/layouts/AdminLayout"
import AuthHOC from '@/components/AuthHOC'
import Button from '@/components/Button';
import { useRouter } from 'next/router';
import { IAmbassador, IReducerAction } from '@/interfaces'
import usePost from '@/hooks/usePost';
import { toast } from 'react-toastify';
import Loader from '@/components/Loader';
import useImage from '@/hooks/useImage';
import TinyEditor from '@/components/Editor';
import { Editor as TinyMCEEditor } from 'tinymce';
import Image from 'next/image';



const initialState: IAmbassador = {
    email: '',
    name: '',
    image: '',
    number: '',
    title: '',
    description: '',
}

type IAction = 'email' | 'name' | 'image' | 'number' | 'title' | 'description' | 'reset'

const AddAmbassador = () => {
    const [ambassador, dispatch] = useReducer((state: IAmbassador, action: IReducerAction<IAction>) => {
        if (action.type === 'reset') return initialState
        return { ...state, [action.type]: action.payload }
    }, initialState)
    const { url, uploadImage, error: errorImage, progress, setError, loading: uploadingImage } = useImage()

    const editorRef = useRef<TinyMCEEditor | null>(null);

    const router = useRouter()
    const { loading, error, data, post } = usePost({ 
        api: "/ambassadors",
        onSuccess: () => {
            toast('Manager Added')
            dispatch({ type: 'reset'})
            router.push('/admin/management')
        } 
    })

    const addAmbassador = (e: FormEvent<HTMLFormElement>) => {
        e.preventDefault()
        post({...ambassador, description: editorRef.current?.getContent()})
        // post(ambassador)
    }

    
    useEffect(() => {
        if (url) {
            dispatch({ type: 'image', payload: url })
        }
    }, [url])
    

    return (
        <AdminLayout>
        <Head>
            <title>Brilliant Brains</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/faviconimg.png" />z
        </Head>
        {(loading || uploadingImage) && <Loader modalOpen={true} />}
        <div className='h-full p-4 py-12 overflow-y-auto sm:px-12'>
            <div className="flex items-center justify-between gap-4 mb-16">
                <h1 className='text-3xl text-black/70 font-argentinum'>Add to Management Team</h1>
                <Button onClick={() => router.push("/admin/management")} className="px-4 py-2 text-sm text-white sm:px-6 rounded-xl">View Team</Button>
            </div>
            <form className="flex flex-col gap-4" onSubmit={addAmbassador}>
                <div className="flex flex-col gap-1">
                    <label htmlFor="name" className="text-black/70">Name</label>
                    <input required onChange={(e) => dispatch({ type: 'name', payload: e.target.value })} value={ambassador?.name} type="text" name="name" id="name" className="p-2 border rounded-md border-black/20" />
                </div>
                <div className="flex flex-col gap-1">
                    <label htmlFor="email" className="text-black/70">Email</label>
                    <input required onChange={(e) => dispatch({ type: 'email', payload: e.target.value })} value={ambassador?.email} type="email" name="email" id="email" className="p-2 border rounded-md border-black/20" />
                </div>
                {/* <div className="flex flex-col gap-1">
                    <span className="text-black/70">Upload Image</span>
                    <label className="border border-black/20 rounded-md p-2 min-h-[42px] max-h-12 whitespace-nowrap overflow-hidden bg-white" htmlFor="image">
                        {ambassador?.image ? ambassador?.image : ''}
                    </label>

                    <input type='file' name='image' id='image' className='invisible w-0 h-0' onChange={(e) => uploadImage(e.target.files![0])} />
                </div> */}
                <div className="flex flex-col gap-1">
                    <label htmlFor="number" className="text-black/70">Phone</label>
                    <input required onChange={(e) => dispatch({ type: 'number', payload: e.target.value })} value={ambassador?.number} type="tel" name="number" id="number" className="p-2 border rounded-md border-black/20" />
                </div>
                <div className="flex flex-col gap-1">
                    <label htmlFor="title" className="text-black/70">Title</label>
                    <input required onChange={(e) => dispatch({ type: 'title', payload: e.target.value })} value={ambassador?.title} type="text" name="title" id="title" className="p-2 border rounded-md border-black/20" />
                </div>
                <div className="flex flex-col gap-1">
                    <label htmlFor="description" className="text-black/70">Description</label>
                    {/* <textarea rows={5} required onChange={(e) => dispatch({ type: 'description', payload: e.target.value })} value={ambassador?.description} name="description" id="description" className="p-2 border rounded-md border-black/20" /> */}
                    <TinyEditor editorRef={editorRef} />
                </div>
                <div className="flex flex-col gap-1">
                        <span className="text-black/70">Upload Image</span>
                         {ambassador?.image &&
                            <Image width={100} height={100} src={ambassador?.image} alt="" className="relative z-10 object-cover w-24 h-24 bg-gray-100" />
                         }
                        <input type='file' name='image' id='image' className='' onChange={(e) => uploadImage(e.target.files![0])}  />
                        {/* {uploadingImage && <p>Uploading Image {progress}%</p>} */}
                </div>
                {/* <div className="flex flex-col gap-1">
                    <label htmlFor="level" className="text-black/70">Level</label>
                    <select required onChange={(e) => dispatch({ type: 'email', payload: e.target.value })} value={ambassador?.name} name="level" id="level" className="p-2 border rounded-md border-black/20">
                        <option value="">--</option>
                        <option value="1">Level 1</option>
                        <option value="2">Level 2</option>
                        <option value="3">Level 3</option>
                    </select>
                </div> */}
                <div className="flex items-center gap-4 mt-8">
                    <Button type='submit' className="px-4 py-2 text-sm text-white rounded-md sm:px-6">Add to Team</Button>
                    <button onClick={() => dispatch({ type: 'reset' })} className="px-4 py-2 text-sm text-black/60 sm:px-6 rounded-xl">Clear</button>
                </div>
            </form>
        </div>
        </AdminLayout>
    );
}


export default AuthHOC(AddAmbassador)
