import { FormEvent, useEffect, useReducer, useState, useRef, useCallback } from 'react'
import Head from "next/head";
import AdminLayout from "@/layouts/AdminLayout"
import AuthHOC from '@/components/AuthHOC'
import Button from '@/components/Button';
import { useRouter } from 'next/router';
import { INews, IReducerAction } from '@/interfaces'
import usePost from '@/hooks/usePost';
import { toast } from 'react-toastify';
import Loader from '@/components/Loader';
import useImage from '@/hooks/useImage';
import TinyEditor from '@/components/Editor';
import { Editor as TinyMCEEditor } from 'tinymce';
import Image from 'next/image';


const initialState: INews = {
    title: '',
    content: '',
    image: '',
    snippet: ''
}

type IAction = 'title' | 'image' | 'content' | 'snippet' | 'reset' | 'update'

const EditNews = () => {
    const [loading, setLoading] = useState(false)
    const [news, dispatch] = useReducer((state: INews, action: IReducerAction<IAction>) => {
        if (action.type === 'reset') return initialState
        if (action.type === 'update') {
            if (typeof action.data !== 'string') 
            return { ...state, ...action.data }
        }
        return { ...state, [action.type]: action.payload }
    }, initialState)
    const { url, uploadImage, error: errorImage, progress, setError, loading: uploadingImage } = useImage()

    const editorRef = useRef<TinyMCEEditor | null>(null);

    const router = useRouter()    
    const { id } = router.query

    const { loading: posting, error, data, post } = usePost({ 
        api: `/news/${id}`,
        method: 'PATCH',
        onSuccess: () => {
            toast('news Updated')
            dispatch({ type: 'reset'})
            editorRef.current?.setContent('')
            router.push('/admin/news')
        } 
    })

    const updateNews = (e: FormEvent<HTMLFormElement>) => {
        e.preventDefault()
        // console.log({news, content: editorRef.current?.getContent()})
        post({...news, content: editorRef.current?.getContent()})
        // post(News)
    }

    
    useEffect(() => {
        if (url) {
            dispatch({ type: 'image', payload: url })
        }
    }, [url])

    const fetchNews = useCallback(
        async () => {
            try {
              setLoading(true)
              const res = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/news/${id}`)
              const data = await res.json()
              
              if (!res.ok) throw new Error(data.message)
      
              console.log({data})
              dispatch({ type: 'update', data: data })
            //   dispatch({ type: 'description', payload: editorRef.current?.getContent() })
              editorRef.current?.setContent(data.content)

            } catch (error) {
              console.log({error})
            }
            setLoading(false)
          },
      [id],
    )
     
    useEffect(() => {
        fetchNews()
      }, [id, fetchNews])
    

    return (
        <AdminLayout>
        <Head>
            <title>Brilliant Brains</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/faviconimg.png" />
        </Head>
        {(loading || posting || uploadingImage) && <Loader modalOpen={true} />}
        <div className='p-4 py-12 sm:px-12 h-full overflow-y-auto'>
            <div className="flex items-center gap-4 justify-between mb-16">
                <h1 className='text-3xl text-black/70 font-argentinum'>Edit News</h1>
                <Button onClick={() => router.push("/admin/news")} className="text-white px-4 sm:px-6 py-2 rounded-xl text-sm">View News</Button>
            </div>
            <form className="flex flex-col gap-4" onSubmit={updateNews}>
                <div className="flex flex-col gap-1">
                    <label htmlFor="title" className="text-black/70">Title</label>
                    <input required onChange={(e) => dispatch({ type: 'title', payload: e.target.value })} value={news?.title} type="text" name="title" id="title" className="border border-black/20 rounded-md p-2" />
                </div>
                <div className="flex flex-col gap-1">
                    <label htmlFor="snippet" className="text-black/70">Snippet</label>
                    <input maxLength={120} required onChange={(e) => dispatch({ type: 'snippet', payload: e.target.value })} value={news?.snippet} type="text" name="snippet" id="snippet" className="border border-black/20 rounded-md p-2" />
                </div>
                <div className="flex flex-col gap-1">
                    <label htmlFor="description" className="text-black/70">Content</label>
                    <TinyEditor editorRef={editorRef} height={500} />
                </div>
                <div className="flex flex-col gap-1">
                        <span className="text-black/70">Upload Image</span>
                         {news?.image &&
                            <Image width={100} height={100} src={news?.image} alt="" className="h-24 w-24 bg-gray-100 object-cover z-10 relative" />
                         }
                        <input type='file' name='image' id='image' className='' onChange={(e) => uploadImage(e.target.files![0])}  />
                </div>
                <div className="flex items-center gap-4 mt-8">
                    <Button type='submit' className="text-white px-4 sm:px-6 py-2 rounded-md text-sm">Update</Button>
                </div>
            </form>
        </div>
        </AdminLayout>
    );
}


export default AuthHOC(EditNews)
